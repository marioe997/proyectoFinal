// Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  cartelera: (where?: CarteleraWhereInput) => Promise<boolean>;
  detalleCartelera: (where?: DetalleCarteleraWhereInput) => Promise<boolean>;
  detalleSala: (where?: DetalleSalaWhereInput) => Promise<boolean>;
  detalleTaquilla: (where?: DetalleTaquillaWhereInput) => Promise<boolean>;
  salas: (where?: SalasWhereInput) => Promise<boolean>;
  taquilla: (where?: TaquillaWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cartelera: (where: CarteleraWhereUniqueInput) => CarteleraNullablePromise;
  carteleras: (args?: {
    where?: CarteleraWhereInput;
    orderBy?: CarteleraOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cartelera>;
  cartelerasConnection: (args?: {
    where?: CarteleraWhereInput;
    orderBy?: CarteleraOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CarteleraConnectionPromise;
  detalleCartelera: (
    where: DetalleCarteleraWhereUniqueInput
  ) => DetalleCarteleraNullablePromise;
  detalleCarteleras: (args?: {
    where?: DetalleCarteleraWhereInput;
    orderBy?: DetalleCarteleraOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<DetalleCartelera>;
  detalleCartelerasConnection: (args?: {
    where?: DetalleCarteleraWhereInput;
    orderBy?: DetalleCarteleraOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DetalleCarteleraConnectionPromise;
  detalleSala: (
    where: DetalleSalaWhereUniqueInput
  ) => DetalleSalaNullablePromise;
  detalleSalas: (args?: {
    where?: DetalleSalaWhereInput;
    orderBy?: DetalleSalaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<DetalleSala>;
  detalleSalasConnection: (args?: {
    where?: DetalleSalaWhereInput;
    orderBy?: DetalleSalaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DetalleSalaConnectionPromise;
  detalleTaquilla: (
    where: DetalleTaquillaWhereUniqueInput
  ) => DetalleTaquillaNullablePromise;
  detalleTaquillas: (args?: {
    where?: DetalleTaquillaWhereInput;
    orderBy?: DetalleTaquillaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<DetalleTaquilla>;
  detalleTaquillasConnection: (args?: {
    where?: DetalleTaquillaWhereInput;
    orderBy?: DetalleTaquillaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DetalleTaquillaConnectionPromise;
  salas: (where: SalasWhereUniqueInput) => SalasNullablePromise;
  salases: (args?: {
    where?: SalasWhereInput;
    orderBy?: SalasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Salas>;
  salasesConnection: (args?: {
    where?: SalasWhereInput;
    orderBy?: SalasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SalasConnectionPromise;
  taquilla: (where: TaquillaWhereUniqueInput) => TaquillaNullablePromise;
  taquillas: (args?: {
    where?: TaquillaWhereInput;
    orderBy?: TaquillaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Taquilla>;
  taquillasConnection: (args?: {
    where?: TaquillaWhereInput;
    orderBy?: TaquillaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TaquillaConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCartelera: (data: CarteleraCreateInput) => CarteleraPromise;
  updateCartelera: (args: {
    data: CarteleraUpdateInput;
    where: CarteleraWhereUniqueInput;
  }) => CarteleraPromise;
  updateManyCarteleras: (args: {
    data: CarteleraUpdateManyMutationInput;
    where?: CarteleraWhereInput;
  }) => BatchPayloadPromise;
  upsertCartelera: (args: {
    where: CarteleraWhereUniqueInput;
    create: CarteleraCreateInput;
    update: CarteleraUpdateInput;
  }) => CarteleraPromise;
  deleteCartelera: (where: CarteleraWhereUniqueInput) => CarteleraPromise;
  deleteManyCarteleras: (where?: CarteleraWhereInput) => BatchPayloadPromise;
  createDetalleCartelera: (
    data: DetalleCarteleraCreateInput
  ) => DetalleCarteleraPromise;
  deleteDetalleCartelera: (
    where: DetalleCarteleraWhereUniqueInput
  ) => DetalleCarteleraPromise;
  deleteManyDetalleCarteleras: (
    where?: DetalleCarteleraWhereInput
  ) => BatchPayloadPromise;
  createDetalleSala: (data: DetalleSalaCreateInput) => DetalleSalaPromise;
  deleteDetalleSala: (where: DetalleSalaWhereUniqueInput) => DetalleSalaPromise;
  deleteManyDetalleSalas: (
    where?: DetalleSalaWhereInput
  ) => BatchPayloadPromise;
  createDetalleTaquilla: (
    data: DetalleTaquillaCreateInput
  ) => DetalleTaquillaPromise;
  deleteDetalleTaquilla: (
    where: DetalleTaquillaWhereUniqueInput
  ) => DetalleTaquillaPromise;
  deleteManyDetalleTaquillas: (
    where?: DetalleTaquillaWhereInput
  ) => BatchPayloadPromise;
  createSalas: (data: SalasCreateInput) => SalasPromise;
  updateSalas: (args: {
    data: SalasUpdateInput;
    where: SalasWhereUniqueInput;
  }) => SalasPromise;
  updateManySalases: (args: {
    data: SalasUpdateManyMutationInput;
    where?: SalasWhereInput;
  }) => BatchPayloadPromise;
  upsertSalas: (args: {
    where: SalasWhereUniqueInput;
    create: SalasCreateInput;
    update: SalasUpdateInput;
  }) => SalasPromise;
  deleteSalas: (where: SalasWhereUniqueInput) => SalasPromise;
  deleteManySalases: (where?: SalasWhereInput) => BatchPayloadPromise;
  createTaquilla: (data: TaquillaCreateInput) => TaquillaPromise;
  updateTaquilla: (args: {
    data: TaquillaUpdateInput;
    where: TaquillaWhereUniqueInput;
  }) => TaquillaPromise;
  updateManyTaquillas: (args: {
    data: TaquillaUpdateManyMutationInput;
    where?: TaquillaWhereInput;
  }) => BatchPayloadPromise;
  upsertTaquilla: (args: {
    where: TaquillaWhereUniqueInput;
    create: TaquillaCreateInput;
    update: TaquillaUpdateInput;
  }) => TaquillaPromise;
  deleteTaquilla: (where: TaquillaWhereUniqueInput) => TaquillaPromise;
  deleteManyTaquillas: (where?: TaquillaWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cartelera: (
    where?: CarteleraSubscriptionWhereInput
  ) => CarteleraSubscriptionPayloadSubscription;
  detalleCartelera: (
    where?: DetalleCarteleraSubscriptionWhereInput
  ) => DetalleCarteleraSubscriptionPayloadSubscription;
  detalleSala: (
    where?: DetalleSalaSubscriptionWhereInput
  ) => DetalleSalaSubscriptionPayloadSubscription;
  detalleTaquilla: (
    where?: DetalleTaquillaSubscriptionWhereInput
  ) => DetalleTaquillaSubscriptionPayloadSubscription;
  salas: (
    where?: SalasSubscriptionWhereInput
  ) => SalasSubscriptionPayloadSubscription;
  taquilla: (
    where?: TaquillaSubscriptionWhereInput
  ) => TaquillaSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CarteleraOrderByInput =
  | "id_pelicula_ASC"
  | "id_pelicula_DESC"
  | "nombre_peli_ASC"
  | "nombre_peli_DESC"
  | "sinopsis_ASC"
  | "sinopsis_DESC"
  | "clasificacion_ASC"
  | "clasificacion_DESC"
  | "duracion_ASC"
  | "duracion_DESC";

export type DetalleCarteleraOrderByInput =
  | "id_pelicula_DC_ASC"
  | "id_pelicula_DC_DESC"
  | "hora_DC_ASC"
  | "hora_DC_DESC"
  | "dia_DC_ASC"
  | "dia_DC_DESC";

export type DetalleSalaOrderByInput =
  | "no_sala_DS_ASC"
  | "no_sala_DS_DESC"
  | "asiento_DS_ASC"
  | "asiento_DS_DESC"
  | "fila_DS_ASC"
  | "fila_DS_DESC";

export type DetalleTaquillaOrderByInput =
  | "no_venta_DT_ASC"
  | "no_venta_DT_DESC"
  | "no_sala_ASC"
  | "no_sala_DESC"
  | "asiento_ASC"
  | "asiento_DESC"
  | "fila_ASC"
  | "fila_DESC"
  | "id_pelicula_DT_ASC"
  | "id_pelicula_DT_DESC"
  | "hora_ASC"
  | "hora_DESC"
  | "dia_ASC"
  | "dia_DESC";

export type SalasOrderByInput =
  | "no_sala_ASC"
  | "no_sala_DESC"
  | "tipo_sala_ASC"
  | "tipo_sala_DESC"
  | "totalAsientos_ASC"
  | "totalAsientos_DESC"
  | "totalFunciones_ASC"
  | "totalFunciones_DESC";

export type TaquillaOrderByInput =
  | "no_venta_ASC"
  | "no_venta_DESC"
  | "fecha_t_ASC"
  | "fecha_t_DESC"
  | "hora_t_ASC"
  | "hora_t_DESC"
  | "total_por_pagar_ASC"
  | "total_por_pagar_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CarteleraWhereUniqueInput = AtLeastOne<{
  id_pelicula: Maybe<ID_Input>;
}>;

export interface CarteleraWhereInput {
  id_pelicula?: Maybe<ID_Input>;
  id_pelicula_not?: Maybe<ID_Input>;
  id_pelicula_in?: Maybe<ID_Input[] | ID_Input>;
  id_pelicula_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_pelicula_lt?: Maybe<ID_Input>;
  id_pelicula_lte?: Maybe<ID_Input>;
  id_pelicula_gt?: Maybe<ID_Input>;
  id_pelicula_gte?: Maybe<ID_Input>;
  id_pelicula_contains?: Maybe<ID_Input>;
  id_pelicula_not_contains?: Maybe<ID_Input>;
  id_pelicula_starts_with?: Maybe<ID_Input>;
  id_pelicula_not_starts_with?: Maybe<ID_Input>;
  id_pelicula_ends_with?: Maybe<ID_Input>;
  id_pelicula_not_ends_with?: Maybe<ID_Input>;
  nombre_peli?: Maybe<String>;
  nombre_peli_not?: Maybe<String>;
  nombre_peli_in?: Maybe<String[] | String>;
  nombre_peli_not_in?: Maybe<String[] | String>;
  nombre_peli_lt?: Maybe<String>;
  nombre_peli_lte?: Maybe<String>;
  nombre_peli_gt?: Maybe<String>;
  nombre_peli_gte?: Maybe<String>;
  nombre_peli_contains?: Maybe<String>;
  nombre_peli_not_contains?: Maybe<String>;
  nombre_peli_starts_with?: Maybe<String>;
  nombre_peli_not_starts_with?: Maybe<String>;
  nombre_peli_ends_with?: Maybe<String>;
  nombre_peli_not_ends_with?: Maybe<String>;
  sinopsis?: Maybe<String>;
  sinopsis_not?: Maybe<String>;
  sinopsis_in?: Maybe<String[] | String>;
  sinopsis_not_in?: Maybe<String[] | String>;
  sinopsis_lt?: Maybe<String>;
  sinopsis_lte?: Maybe<String>;
  sinopsis_gt?: Maybe<String>;
  sinopsis_gte?: Maybe<String>;
  sinopsis_contains?: Maybe<String>;
  sinopsis_not_contains?: Maybe<String>;
  sinopsis_starts_with?: Maybe<String>;
  sinopsis_not_starts_with?: Maybe<String>;
  sinopsis_ends_with?: Maybe<String>;
  sinopsis_not_ends_with?: Maybe<String>;
  clasificacion?: Maybe<String>;
  clasificacion_not?: Maybe<String>;
  clasificacion_in?: Maybe<String[] | String>;
  clasificacion_not_in?: Maybe<String[] | String>;
  clasificacion_lt?: Maybe<String>;
  clasificacion_lte?: Maybe<String>;
  clasificacion_gt?: Maybe<String>;
  clasificacion_gte?: Maybe<String>;
  clasificacion_contains?: Maybe<String>;
  clasificacion_not_contains?: Maybe<String>;
  clasificacion_starts_with?: Maybe<String>;
  clasificacion_not_starts_with?: Maybe<String>;
  clasificacion_ends_with?: Maybe<String>;
  clasificacion_not_ends_with?: Maybe<String>;
  duracion?: Maybe<Int>;
  duracion_not?: Maybe<Int>;
  duracion_in?: Maybe<Int[] | Int>;
  duracion_not_in?: Maybe<Int[] | Int>;
  duracion_lt?: Maybe<Int>;
  duracion_lte?: Maybe<Int>;
  duracion_gt?: Maybe<Int>;
  duracion_gte?: Maybe<Int>;
  AND?: Maybe<CarteleraWhereInput[] | CarteleraWhereInput>;
}

export type DetalleCarteleraWhereUniqueInput = AtLeastOne<{
  id_pelicula_DC: Maybe<ID_Input>;
  hora_DC?: Maybe<ID_Input>;
  dia_DC?: Maybe<ID_Input>;
}>;

export interface DetalleCarteleraWhereInput {
  id_pelicula_DC?: Maybe<ID_Input>;
  id_pelicula_DC_not?: Maybe<ID_Input>;
  id_pelicula_DC_in?: Maybe<ID_Input[] | ID_Input>;
  id_pelicula_DC_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_pelicula_DC_lt?: Maybe<ID_Input>;
  id_pelicula_DC_lte?: Maybe<ID_Input>;
  id_pelicula_DC_gt?: Maybe<ID_Input>;
  id_pelicula_DC_gte?: Maybe<ID_Input>;
  id_pelicula_DC_contains?: Maybe<ID_Input>;
  id_pelicula_DC_not_contains?: Maybe<ID_Input>;
  id_pelicula_DC_starts_with?: Maybe<ID_Input>;
  id_pelicula_DC_not_starts_with?: Maybe<ID_Input>;
  id_pelicula_DC_ends_with?: Maybe<ID_Input>;
  id_pelicula_DC_not_ends_with?: Maybe<ID_Input>;
  hora_DC?: Maybe<ID_Input>;
  hora_DC_not?: Maybe<ID_Input>;
  hora_DC_in?: Maybe<ID_Input[] | ID_Input>;
  hora_DC_not_in?: Maybe<ID_Input[] | ID_Input>;
  hora_DC_lt?: Maybe<ID_Input>;
  hora_DC_lte?: Maybe<ID_Input>;
  hora_DC_gt?: Maybe<ID_Input>;
  hora_DC_gte?: Maybe<ID_Input>;
  hora_DC_contains?: Maybe<ID_Input>;
  hora_DC_not_contains?: Maybe<ID_Input>;
  hora_DC_starts_with?: Maybe<ID_Input>;
  hora_DC_not_starts_with?: Maybe<ID_Input>;
  hora_DC_ends_with?: Maybe<ID_Input>;
  hora_DC_not_ends_with?: Maybe<ID_Input>;
  dia_DC?: Maybe<ID_Input>;
  dia_DC_not?: Maybe<ID_Input>;
  dia_DC_in?: Maybe<ID_Input[] | ID_Input>;
  dia_DC_not_in?: Maybe<ID_Input[] | ID_Input>;
  dia_DC_lt?: Maybe<ID_Input>;
  dia_DC_lte?: Maybe<ID_Input>;
  dia_DC_gt?: Maybe<ID_Input>;
  dia_DC_gte?: Maybe<ID_Input>;
  dia_DC_contains?: Maybe<ID_Input>;
  dia_DC_not_contains?: Maybe<ID_Input>;
  dia_DC_starts_with?: Maybe<ID_Input>;
  dia_DC_not_starts_with?: Maybe<ID_Input>;
  dia_DC_ends_with?: Maybe<ID_Input>;
  dia_DC_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<DetalleCarteleraWhereInput[] | DetalleCarteleraWhereInput>;
}

export type DetalleSalaWhereUniqueInput = AtLeastOne<{
  no_sala_DS: Maybe<ID_Input>;
  asiento_DS?: Maybe<ID_Input>;
  fila_DS?: Maybe<ID_Input>;
}>;

export interface DetalleSalaWhereInput {
  no_sala_DS?: Maybe<ID_Input>;
  no_sala_DS_not?: Maybe<ID_Input>;
  no_sala_DS_in?: Maybe<ID_Input[] | ID_Input>;
  no_sala_DS_not_in?: Maybe<ID_Input[] | ID_Input>;
  no_sala_DS_lt?: Maybe<ID_Input>;
  no_sala_DS_lte?: Maybe<ID_Input>;
  no_sala_DS_gt?: Maybe<ID_Input>;
  no_sala_DS_gte?: Maybe<ID_Input>;
  no_sala_DS_contains?: Maybe<ID_Input>;
  no_sala_DS_not_contains?: Maybe<ID_Input>;
  no_sala_DS_starts_with?: Maybe<ID_Input>;
  no_sala_DS_not_starts_with?: Maybe<ID_Input>;
  no_sala_DS_ends_with?: Maybe<ID_Input>;
  no_sala_DS_not_ends_with?: Maybe<ID_Input>;
  asiento_DS?: Maybe<ID_Input>;
  asiento_DS_not?: Maybe<ID_Input>;
  asiento_DS_in?: Maybe<ID_Input[] | ID_Input>;
  asiento_DS_not_in?: Maybe<ID_Input[] | ID_Input>;
  asiento_DS_lt?: Maybe<ID_Input>;
  asiento_DS_lte?: Maybe<ID_Input>;
  asiento_DS_gt?: Maybe<ID_Input>;
  asiento_DS_gte?: Maybe<ID_Input>;
  asiento_DS_contains?: Maybe<ID_Input>;
  asiento_DS_not_contains?: Maybe<ID_Input>;
  asiento_DS_starts_with?: Maybe<ID_Input>;
  asiento_DS_not_starts_with?: Maybe<ID_Input>;
  asiento_DS_ends_with?: Maybe<ID_Input>;
  asiento_DS_not_ends_with?: Maybe<ID_Input>;
  fila_DS?: Maybe<ID_Input>;
  fila_DS_not?: Maybe<ID_Input>;
  fila_DS_in?: Maybe<ID_Input[] | ID_Input>;
  fila_DS_not_in?: Maybe<ID_Input[] | ID_Input>;
  fila_DS_lt?: Maybe<ID_Input>;
  fila_DS_lte?: Maybe<ID_Input>;
  fila_DS_gt?: Maybe<ID_Input>;
  fila_DS_gte?: Maybe<ID_Input>;
  fila_DS_contains?: Maybe<ID_Input>;
  fila_DS_not_contains?: Maybe<ID_Input>;
  fila_DS_starts_with?: Maybe<ID_Input>;
  fila_DS_not_starts_with?: Maybe<ID_Input>;
  fila_DS_ends_with?: Maybe<ID_Input>;
  fila_DS_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<DetalleSalaWhereInput[] | DetalleSalaWhereInput>;
}

export type DetalleTaquillaWhereUniqueInput = AtLeastOne<{
  no_venta_DT: Maybe<ID_Input>;
  no_sala?: Maybe<ID_Input>;
  asiento?: Maybe<ID_Input>;
  fila?: Maybe<ID_Input>;
  id_pelicula_DT?: Maybe<ID_Input>;
  hora?: Maybe<ID_Input>;
  dia?: Maybe<ID_Input>;
}>;

export interface DetalleTaquillaWhereInput {
  no_venta_DT?: Maybe<ID_Input>;
  no_venta_DT_not?: Maybe<ID_Input>;
  no_venta_DT_in?: Maybe<ID_Input[] | ID_Input>;
  no_venta_DT_not_in?: Maybe<ID_Input[] | ID_Input>;
  no_venta_DT_lt?: Maybe<ID_Input>;
  no_venta_DT_lte?: Maybe<ID_Input>;
  no_venta_DT_gt?: Maybe<ID_Input>;
  no_venta_DT_gte?: Maybe<ID_Input>;
  no_venta_DT_contains?: Maybe<ID_Input>;
  no_venta_DT_not_contains?: Maybe<ID_Input>;
  no_venta_DT_starts_with?: Maybe<ID_Input>;
  no_venta_DT_not_starts_with?: Maybe<ID_Input>;
  no_venta_DT_ends_with?: Maybe<ID_Input>;
  no_venta_DT_not_ends_with?: Maybe<ID_Input>;
  no_sala?: Maybe<ID_Input>;
  no_sala_not?: Maybe<ID_Input>;
  no_sala_in?: Maybe<ID_Input[] | ID_Input>;
  no_sala_not_in?: Maybe<ID_Input[] | ID_Input>;
  no_sala_lt?: Maybe<ID_Input>;
  no_sala_lte?: Maybe<ID_Input>;
  no_sala_gt?: Maybe<ID_Input>;
  no_sala_gte?: Maybe<ID_Input>;
  no_sala_contains?: Maybe<ID_Input>;
  no_sala_not_contains?: Maybe<ID_Input>;
  no_sala_starts_with?: Maybe<ID_Input>;
  no_sala_not_starts_with?: Maybe<ID_Input>;
  no_sala_ends_with?: Maybe<ID_Input>;
  no_sala_not_ends_with?: Maybe<ID_Input>;
  asiento?: Maybe<ID_Input>;
  asiento_not?: Maybe<ID_Input>;
  asiento_in?: Maybe<ID_Input[] | ID_Input>;
  asiento_not_in?: Maybe<ID_Input[] | ID_Input>;
  asiento_lt?: Maybe<ID_Input>;
  asiento_lte?: Maybe<ID_Input>;
  asiento_gt?: Maybe<ID_Input>;
  asiento_gte?: Maybe<ID_Input>;
  asiento_contains?: Maybe<ID_Input>;
  asiento_not_contains?: Maybe<ID_Input>;
  asiento_starts_with?: Maybe<ID_Input>;
  asiento_not_starts_with?: Maybe<ID_Input>;
  asiento_ends_with?: Maybe<ID_Input>;
  asiento_not_ends_with?: Maybe<ID_Input>;
  fila?: Maybe<ID_Input>;
  fila_not?: Maybe<ID_Input>;
  fila_in?: Maybe<ID_Input[] | ID_Input>;
  fila_not_in?: Maybe<ID_Input[] | ID_Input>;
  fila_lt?: Maybe<ID_Input>;
  fila_lte?: Maybe<ID_Input>;
  fila_gt?: Maybe<ID_Input>;
  fila_gte?: Maybe<ID_Input>;
  fila_contains?: Maybe<ID_Input>;
  fila_not_contains?: Maybe<ID_Input>;
  fila_starts_with?: Maybe<ID_Input>;
  fila_not_starts_with?: Maybe<ID_Input>;
  fila_ends_with?: Maybe<ID_Input>;
  fila_not_ends_with?: Maybe<ID_Input>;
  id_pelicula_DT?: Maybe<ID_Input>;
  id_pelicula_DT_not?: Maybe<ID_Input>;
  id_pelicula_DT_in?: Maybe<ID_Input[] | ID_Input>;
  id_pelicula_DT_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_pelicula_DT_lt?: Maybe<ID_Input>;
  id_pelicula_DT_lte?: Maybe<ID_Input>;
  id_pelicula_DT_gt?: Maybe<ID_Input>;
  id_pelicula_DT_gte?: Maybe<ID_Input>;
  id_pelicula_DT_contains?: Maybe<ID_Input>;
  id_pelicula_DT_not_contains?: Maybe<ID_Input>;
  id_pelicula_DT_starts_with?: Maybe<ID_Input>;
  id_pelicula_DT_not_starts_with?: Maybe<ID_Input>;
  id_pelicula_DT_ends_with?: Maybe<ID_Input>;
  id_pelicula_DT_not_ends_with?: Maybe<ID_Input>;
  hora?: Maybe<ID_Input>;
  hora_not?: Maybe<ID_Input>;
  hora_in?: Maybe<ID_Input[] | ID_Input>;
  hora_not_in?: Maybe<ID_Input[] | ID_Input>;
  hora_lt?: Maybe<ID_Input>;
  hora_lte?: Maybe<ID_Input>;
  hora_gt?: Maybe<ID_Input>;
  hora_gte?: Maybe<ID_Input>;
  hora_contains?: Maybe<ID_Input>;
  hora_not_contains?: Maybe<ID_Input>;
  hora_starts_with?: Maybe<ID_Input>;
  hora_not_starts_with?: Maybe<ID_Input>;
  hora_ends_with?: Maybe<ID_Input>;
  hora_not_ends_with?: Maybe<ID_Input>;
  dia?: Maybe<ID_Input>;
  dia_not?: Maybe<ID_Input>;
  dia_in?: Maybe<ID_Input[] | ID_Input>;
  dia_not_in?: Maybe<ID_Input[] | ID_Input>;
  dia_lt?: Maybe<ID_Input>;
  dia_lte?: Maybe<ID_Input>;
  dia_gt?: Maybe<ID_Input>;
  dia_gte?: Maybe<ID_Input>;
  dia_contains?: Maybe<ID_Input>;
  dia_not_contains?: Maybe<ID_Input>;
  dia_starts_with?: Maybe<ID_Input>;
  dia_not_starts_with?: Maybe<ID_Input>;
  dia_ends_with?: Maybe<ID_Input>;
  dia_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<DetalleTaquillaWhereInput[] | DetalleTaquillaWhereInput>;
}

export type SalasWhereUniqueInput = AtLeastOne<{
  no_sala: Maybe<ID_Input>;
}>;

export interface SalasWhereInput {
  no_sala?: Maybe<ID_Input>;
  no_sala_not?: Maybe<ID_Input>;
  no_sala_in?: Maybe<ID_Input[] | ID_Input>;
  no_sala_not_in?: Maybe<ID_Input[] | ID_Input>;
  no_sala_lt?: Maybe<ID_Input>;
  no_sala_lte?: Maybe<ID_Input>;
  no_sala_gt?: Maybe<ID_Input>;
  no_sala_gte?: Maybe<ID_Input>;
  no_sala_contains?: Maybe<ID_Input>;
  no_sala_not_contains?: Maybe<ID_Input>;
  no_sala_starts_with?: Maybe<ID_Input>;
  no_sala_not_starts_with?: Maybe<ID_Input>;
  no_sala_ends_with?: Maybe<ID_Input>;
  no_sala_not_ends_with?: Maybe<ID_Input>;
  tipo_sala?: Maybe<String>;
  tipo_sala_not?: Maybe<String>;
  tipo_sala_in?: Maybe<String[] | String>;
  tipo_sala_not_in?: Maybe<String[] | String>;
  tipo_sala_lt?: Maybe<String>;
  tipo_sala_lte?: Maybe<String>;
  tipo_sala_gt?: Maybe<String>;
  tipo_sala_gte?: Maybe<String>;
  tipo_sala_contains?: Maybe<String>;
  tipo_sala_not_contains?: Maybe<String>;
  tipo_sala_starts_with?: Maybe<String>;
  tipo_sala_not_starts_with?: Maybe<String>;
  tipo_sala_ends_with?: Maybe<String>;
  tipo_sala_not_ends_with?: Maybe<String>;
  totalAsientos?: Maybe<String>;
  totalAsientos_not?: Maybe<String>;
  totalAsientos_in?: Maybe<String[] | String>;
  totalAsientos_not_in?: Maybe<String[] | String>;
  totalAsientos_lt?: Maybe<String>;
  totalAsientos_lte?: Maybe<String>;
  totalAsientos_gt?: Maybe<String>;
  totalAsientos_gte?: Maybe<String>;
  totalAsientos_contains?: Maybe<String>;
  totalAsientos_not_contains?: Maybe<String>;
  totalAsientos_starts_with?: Maybe<String>;
  totalAsientos_not_starts_with?: Maybe<String>;
  totalAsientos_ends_with?: Maybe<String>;
  totalAsientos_not_ends_with?: Maybe<String>;
  totalFunciones?: Maybe<String>;
  totalFunciones_not?: Maybe<String>;
  totalFunciones_in?: Maybe<String[] | String>;
  totalFunciones_not_in?: Maybe<String[] | String>;
  totalFunciones_lt?: Maybe<String>;
  totalFunciones_lte?: Maybe<String>;
  totalFunciones_gt?: Maybe<String>;
  totalFunciones_gte?: Maybe<String>;
  totalFunciones_contains?: Maybe<String>;
  totalFunciones_not_contains?: Maybe<String>;
  totalFunciones_starts_with?: Maybe<String>;
  totalFunciones_not_starts_with?: Maybe<String>;
  totalFunciones_ends_with?: Maybe<String>;
  totalFunciones_not_ends_with?: Maybe<String>;
  AND?: Maybe<SalasWhereInput[] | SalasWhereInput>;
}

export type TaquillaWhereUniqueInput = AtLeastOne<{
  no_venta: Maybe<ID_Input>;
}>;

export interface TaquillaWhereInput {
  no_venta?: Maybe<ID_Input>;
  no_venta_not?: Maybe<ID_Input>;
  no_venta_in?: Maybe<ID_Input[] | ID_Input>;
  no_venta_not_in?: Maybe<ID_Input[] | ID_Input>;
  no_venta_lt?: Maybe<ID_Input>;
  no_venta_lte?: Maybe<ID_Input>;
  no_venta_gt?: Maybe<ID_Input>;
  no_venta_gte?: Maybe<ID_Input>;
  no_venta_contains?: Maybe<ID_Input>;
  no_venta_not_contains?: Maybe<ID_Input>;
  no_venta_starts_with?: Maybe<ID_Input>;
  no_venta_not_starts_with?: Maybe<ID_Input>;
  no_venta_ends_with?: Maybe<ID_Input>;
  no_venta_not_ends_with?: Maybe<ID_Input>;
  fecha_t?: Maybe<DateTimeInput>;
  fecha_t_not?: Maybe<DateTimeInput>;
  fecha_t_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  fecha_t_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  fecha_t_lt?: Maybe<DateTimeInput>;
  fecha_t_lte?: Maybe<DateTimeInput>;
  fecha_t_gt?: Maybe<DateTimeInput>;
  fecha_t_gte?: Maybe<DateTimeInput>;
  hora_t?: Maybe<DateTimeInput>;
  hora_t_not?: Maybe<DateTimeInput>;
  hora_t_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  hora_t_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  hora_t_lt?: Maybe<DateTimeInput>;
  hora_t_lte?: Maybe<DateTimeInput>;
  hora_t_gt?: Maybe<DateTimeInput>;
  hora_t_gte?: Maybe<DateTimeInput>;
  total_por_pagar?: Maybe<Float>;
  total_por_pagar_not?: Maybe<Float>;
  total_por_pagar_in?: Maybe<Float[] | Float>;
  total_por_pagar_not_in?: Maybe<Float[] | Float>;
  total_por_pagar_lt?: Maybe<Float>;
  total_por_pagar_lte?: Maybe<Float>;
  total_por_pagar_gt?: Maybe<Float>;
  total_por_pagar_gte?: Maybe<Float>;
  AND?: Maybe<TaquillaWhereInput[] | TaquillaWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CarteleraCreateInput {
  id_pelicula?: Maybe<ID_Input>;
  nombre_peli: String;
  sinopsis: String;
  clasificacion: String;
  duracion: Int;
}

export interface CarteleraUpdateInput {
  nombre_peli?: Maybe<String>;
  sinopsis?: Maybe<String>;
  clasificacion?: Maybe<String>;
  duracion?: Maybe<Int>;
}

export interface CarteleraUpdateManyMutationInput {
  nombre_peli?: Maybe<String>;
  sinopsis?: Maybe<String>;
  clasificacion?: Maybe<String>;
  duracion?: Maybe<Int>;
}

export interface DetalleCarteleraCreateInput {
  id_pelicula_DC?: Maybe<ID_Input>;
  hora_DC?: Maybe<ID_Input>;
  dia_DC?: Maybe<ID_Input>;
}

export interface DetalleSalaCreateInput {
  no_sala_DS?: Maybe<ID_Input>;
  asiento_DS?: Maybe<ID_Input>;
  fila_DS?: Maybe<ID_Input>;
}

export interface DetalleTaquillaCreateInput {
  no_venta_DT?: Maybe<ID_Input>;
  no_sala?: Maybe<ID_Input>;
  asiento?: Maybe<ID_Input>;
  fila?: Maybe<ID_Input>;
  id_pelicula_DT?: Maybe<ID_Input>;
  hora?: Maybe<ID_Input>;
  dia?: Maybe<ID_Input>;
}

export interface SalasCreateInput {
  no_sala?: Maybe<ID_Input>;
  tipo_sala: String;
  totalAsientos: String;
  totalFunciones: String;
}

export interface SalasUpdateInput {
  tipo_sala?: Maybe<String>;
  totalAsientos?: Maybe<String>;
  totalFunciones?: Maybe<String>;
}

export interface SalasUpdateManyMutationInput {
  tipo_sala?: Maybe<String>;
  totalAsientos?: Maybe<String>;
  totalFunciones?: Maybe<String>;
}

export interface TaquillaCreateInput {
  no_venta?: Maybe<ID_Input>;
  fecha_t: DateTimeInput;
  hora_t: DateTimeInput;
  total_por_pagar: Float;
}

export interface TaquillaUpdateInput {
  fecha_t?: Maybe<DateTimeInput>;
  hora_t?: Maybe<DateTimeInput>;
  total_por_pagar?: Maybe<Float>;
}

export interface TaquillaUpdateManyMutationInput {
  fecha_t?: Maybe<DateTimeInput>;
  hora_t?: Maybe<DateTimeInput>;
  total_por_pagar?: Maybe<Float>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password?: Maybe<String>;
  name: String;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
}

export interface CarteleraSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CarteleraWhereInput>;
  AND?: Maybe<
    CarteleraSubscriptionWhereInput[] | CarteleraSubscriptionWhereInput
  >;
}

export interface DetalleCarteleraSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DetalleCarteleraWhereInput>;
  AND?: Maybe<
    | DetalleCarteleraSubscriptionWhereInput[]
    | DetalleCarteleraSubscriptionWhereInput
  >;
}

export interface DetalleSalaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DetalleSalaWhereInput>;
  AND?: Maybe<
    DetalleSalaSubscriptionWhereInput[] | DetalleSalaSubscriptionWhereInput
  >;
}

export interface DetalleTaquillaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DetalleTaquillaWhereInput>;
  AND?: Maybe<
    | DetalleTaquillaSubscriptionWhereInput[]
    | DetalleTaquillaSubscriptionWhereInput
  >;
}

export interface SalasSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SalasWhereInput>;
  AND?: Maybe<SalasSubscriptionWhereInput[] | SalasSubscriptionWhereInput>;
}

export interface TaquillaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TaquillaWhereInput>;
  AND?: Maybe<
    TaquillaSubscriptionWhereInput[] | TaquillaSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Cartelera {
  id_pelicula: ID_Output;
  nombre_peli: String;
  sinopsis: String;
  clasificacion: String;
  duracion: Int;
}

export interface CarteleraPromise extends Promise<Cartelera>, Fragmentable {
  id_pelicula: () => Promise<ID_Output>;
  nombre_peli: () => Promise<String>;
  sinopsis: () => Promise<String>;
  clasificacion: () => Promise<String>;
  duracion: () => Promise<Int>;
}

export interface CarteleraSubscription
  extends Promise<AsyncIterator<Cartelera>>,
    Fragmentable {
  id_pelicula: () => Promise<AsyncIterator<ID_Output>>;
  nombre_peli: () => Promise<AsyncIterator<String>>;
  sinopsis: () => Promise<AsyncIterator<String>>;
  clasificacion: () => Promise<AsyncIterator<String>>;
  duracion: () => Promise<AsyncIterator<Int>>;
}

export interface CarteleraNullablePromise
  extends Promise<Cartelera | null>,
    Fragmentable {
  id_pelicula: () => Promise<ID_Output>;
  nombre_peli: () => Promise<String>;
  sinopsis: () => Promise<String>;
  clasificacion: () => Promise<String>;
  duracion: () => Promise<Int>;
}

export interface CarteleraConnection {
  pageInfo: PageInfo;
  edges: CarteleraEdge[];
}

export interface CarteleraConnectionPromise
  extends Promise<CarteleraConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarteleraEdge>>() => T;
  aggregate: <T = AggregateCarteleraPromise>() => T;
}

export interface CarteleraConnectionSubscription
  extends Promise<AsyncIterator<CarteleraConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CarteleraEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCarteleraSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CarteleraEdge {
  node: Cartelera;
  cursor: String;
}

export interface CarteleraEdgePromise
  extends Promise<CarteleraEdge>,
    Fragmentable {
  node: <T = CarteleraPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarteleraEdgeSubscription
  extends Promise<AsyncIterator<CarteleraEdge>>,
    Fragmentable {
  node: <T = CarteleraSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCartelera {
  count: Int;
}

export interface AggregateCarteleraPromise
  extends Promise<AggregateCartelera>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarteleraSubscription
  extends Promise<AsyncIterator<AggregateCartelera>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DetalleCartelera {
  id_pelicula_DC: ID_Output;
  hora_DC: ID_Output;
  dia_DC: ID_Output;
}

export interface DetalleCarteleraPromise
  extends Promise<DetalleCartelera>,
    Fragmentable {
  id_pelicula_DC: () => Promise<ID_Output>;
  hora_DC: () => Promise<ID_Output>;
  dia_DC: () => Promise<ID_Output>;
}

export interface DetalleCarteleraSubscription
  extends Promise<AsyncIterator<DetalleCartelera>>,
    Fragmentable {
  id_pelicula_DC: () => Promise<AsyncIterator<ID_Output>>;
  hora_DC: () => Promise<AsyncIterator<ID_Output>>;
  dia_DC: () => Promise<AsyncIterator<ID_Output>>;
}

export interface DetalleCarteleraNullablePromise
  extends Promise<DetalleCartelera | null>,
    Fragmentable {
  id_pelicula_DC: () => Promise<ID_Output>;
  hora_DC: () => Promise<ID_Output>;
  dia_DC: () => Promise<ID_Output>;
}

export interface DetalleCarteleraConnection {
  pageInfo: PageInfo;
  edges: DetalleCarteleraEdge[];
}

export interface DetalleCarteleraConnectionPromise
  extends Promise<DetalleCarteleraConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DetalleCarteleraEdge>>() => T;
  aggregate: <T = AggregateDetalleCarteleraPromise>() => T;
}

export interface DetalleCarteleraConnectionSubscription
  extends Promise<AsyncIterator<DetalleCarteleraConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DetalleCarteleraEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDetalleCarteleraSubscription>() => T;
}

export interface DetalleCarteleraEdge {
  node: DetalleCartelera;
  cursor: String;
}

export interface DetalleCarteleraEdgePromise
  extends Promise<DetalleCarteleraEdge>,
    Fragmentable {
  node: <T = DetalleCarteleraPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DetalleCarteleraEdgeSubscription
  extends Promise<AsyncIterator<DetalleCarteleraEdge>>,
    Fragmentable {
  node: <T = DetalleCarteleraSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDetalleCartelera {
  count: Int;
}

export interface AggregateDetalleCarteleraPromise
  extends Promise<AggregateDetalleCartelera>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDetalleCarteleraSubscription
  extends Promise<AsyncIterator<AggregateDetalleCartelera>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DetalleSala {
  no_sala_DS: ID_Output;
  asiento_DS: ID_Output;
  fila_DS: ID_Output;
}

export interface DetalleSalaPromise extends Promise<DetalleSala>, Fragmentable {
  no_sala_DS: () => Promise<ID_Output>;
  asiento_DS: () => Promise<ID_Output>;
  fila_DS: () => Promise<ID_Output>;
}

export interface DetalleSalaSubscription
  extends Promise<AsyncIterator<DetalleSala>>,
    Fragmentable {
  no_sala_DS: () => Promise<AsyncIterator<ID_Output>>;
  asiento_DS: () => Promise<AsyncIterator<ID_Output>>;
  fila_DS: () => Promise<AsyncIterator<ID_Output>>;
}

export interface DetalleSalaNullablePromise
  extends Promise<DetalleSala | null>,
    Fragmentable {
  no_sala_DS: () => Promise<ID_Output>;
  asiento_DS: () => Promise<ID_Output>;
  fila_DS: () => Promise<ID_Output>;
}

export interface DetalleSalaConnection {
  pageInfo: PageInfo;
  edges: DetalleSalaEdge[];
}

export interface DetalleSalaConnectionPromise
  extends Promise<DetalleSalaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DetalleSalaEdge>>() => T;
  aggregate: <T = AggregateDetalleSalaPromise>() => T;
}

export interface DetalleSalaConnectionSubscription
  extends Promise<AsyncIterator<DetalleSalaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DetalleSalaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDetalleSalaSubscription>() => T;
}

export interface DetalleSalaEdge {
  node: DetalleSala;
  cursor: String;
}

export interface DetalleSalaEdgePromise
  extends Promise<DetalleSalaEdge>,
    Fragmentable {
  node: <T = DetalleSalaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DetalleSalaEdgeSubscription
  extends Promise<AsyncIterator<DetalleSalaEdge>>,
    Fragmentable {
  node: <T = DetalleSalaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDetalleSala {
  count: Int;
}

export interface AggregateDetalleSalaPromise
  extends Promise<AggregateDetalleSala>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDetalleSalaSubscription
  extends Promise<AsyncIterator<AggregateDetalleSala>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DetalleTaquilla {
  no_venta_DT: ID_Output;
  no_sala: ID_Output;
  asiento: ID_Output;
  fila: ID_Output;
  id_pelicula_DT: ID_Output;
  hora: ID_Output;
  dia: ID_Output;
}

export interface DetalleTaquillaPromise
  extends Promise<DetalleTaquilla>,
    Fragmentable {
  no_venta_DT: () => Promise<ID_Output>;
  no_sala: () => Promise<ID_Output>;
  asiento: () => Promise<ID_Output>;
  fila: () => Promise<ID_Output>;
  id_pelicula_DT: () => Promise<ID_Output>;
  hora: () => Promise<ID_Output>;
  dia: () => Promise<ID_Output>;
}

export interface DetalleTaquillaSubscription
  extends Promise<AsyncIterator<DetalleTaquilla>>,
    Fragmentable {
  no_venta_DT: () => Promise<AsyncIterator<ID_Output>>;
  no_sala: () => Promise<AsyncIterator<ID_Output>>;
  asiento: () => Promise<AsyncIterator<ID_Output>>;
  fila: () => Promise<AsyncIterator<ID_Output>>;
  id_pelicula_DT: () => Promise<AsyncIterator<ID_Output>>;
  hora: () => Promise<AsyncIterator<ID_Output>>;
  dia: () => Promise<AsyncIterator<ID_Output>>;
}

export interface DetalleTaquillaNullablePromise
  extends Promise<DetalleTaquilla | null>,
    Fragmentable {
  no_venta_DT: () => Promise<ID_Output>;
  no_sala: () => Promise<ID_Output>;
  asiento: () => Promise<ID_Output>;
  fila: () => Promise<ID_Output>;
  id_pelicula_DT: () => Promise<ID_Output>;
  hora: () => Promise<ID_Output>;
  dia: () => Promise<ID_Output>;
}

export interface DetalleTaquillaConnection {
  pageInfo: PageInfo;
  edges: DetalleTaquillaEdge[];
}

export interface DetalleTaquillaConnectionPromise
  extends Promise<DetalleTaquillaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DetalleTaquillaEdge>>() => T;
  aggregate: <T = AggregateDetalleTaquillaPromise>() => T;
}

export interface DetalleTaquillaConnectionSubscription
  extends Promise<AsyncIterator<DetalleTaquillaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DetalleTaquillaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDetalleTaquillaSubscription>() => T;
}

export interface DetalleTaquillaEdge {
  node: DetalleTaquilla;
  cursor: String;
}

export interface DetalleTaquillaEdgePromise
  extends Promise<DetalleTaquillaEdge>,
    Fragmentable {
  node: <T = DetalleTaquillaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DetalleTaquillaEdgeSubscription
  extends Promise<AsyncIterator<DetalleTaquillaEdge>>,
    Fragmentable {
  node: <T = DetalleTaquillaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDetalleTaquilla {
  count: Int;
}

export interface AggregateDetalleTaquillaPromise
  extends Promise<AggregateDetalleTaquilla>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDetalleTaquillaSubscription
  extends Promise<AsyncIterator<AggregateDetalleTaquilla>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Salas {
  no_sala: ID_Output;
  tipo_sala: String;
  totalAsientos: String;
  totalFunciones: String;
}

export interface SalasPromise extends Promise<Salas>, Fragmentable {
  no_sala: () => Promise<ID_Output>;
  tipo_sala: () => Promise<String>;
  totalAsientos: () => Promise<String>;
  totalFunciones: () => Promise<String>;
}

export interface SalasSubscription
  extends Promise<AsyncIterator<Salas>>,
    Fragmentable {
  no_sala: () => Promise<AsyncIterator<ID_Output>>;
  tipo_sala: () => Promise<AsyncIterator<String>>;
  totalAsientos: () => Promise<AsyncIterator<String>>;
  totalFunciones: () => Promise<AsyncIterator<String>>;
}

export interface SalasNullablePromise
  extends Promise<Salas | null>,
    Fragmentable {
  no_sala: () => Promise<ID_Output>;
  tipo_sala: () => Promise<String>;
  totalAsientos: () => Promise<String>;
  totalFunciones: () => Promise<String>;
}

export interface SalasConnection {
  pageInfo: PageInfo;
  edges: SalasEdge[];
}

export interface SalasConnectionPromise
  extends Promise<SalasConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SalasEdge>>() => T;
  aggregate: <T = AggregateSalasPromise>() => T;
}

export interface SalasConnectionSubscription
  extends Promise<AsyncIterator<SalasConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SalasEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSalasSubscription>() => T;
}

export interface SalasEdge {
  node: Salas;
  cursor: String;
}

export interface SalasEdgePromise extends Promise<SalasEdge>, Fragmentable {
  node: <T = SalasPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SalasEdgeSubscription
  extends Promise<AsyncIterator<SalasEdge>>,
    Fragmentable {
  node: <T = SalasSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSalas {
  count: Int;
}

export interface AggregateSalasPromise
  extends Promise<AggregateSalas>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSalasSubscription
  extends Promise<AsyncIterator<AggregateSalas>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Taquilla {
  no_venta: ID_Output;
  fecha_t: DateTimeOutput;
  hora_t: DateTimeOutput;
  total_por_pagar: Float;
}

export interface TaquillaPromise extends Promise<Taquilla>, Fragmentable {
  no_venta: () => Promise<ID_Output>;
  fecha_t: () => Promise<DateTimeOutput>;
  hora_t: () => Promise<DateTimeOutput>;
  total_por_pagar: () => Promise<Float>;
}

export interface TaquillaSubscription
  extends Promise<AsyncIterator<Taquilla>>,
    Fragmentable {
  no_venta: () => Promise<AsyncIterator<ID_Output>>;
  fecha_t: () => Promise<AsyncIterator<DateTimeOutput>>;
  hora_t: () => Promise<AsyncIterator<DateTimeOutput>>;
  total_por_pagar: () => Promise<AsyncIterator<Float>>;
}

export interface TaquillaNullablePromise
  extends Promise<Taquilla | null>,
    Fragmentable {
  no_venta: () => Promise<ID_Output>;
  fecha_t: () => Promise<DateTimeOutput>;
  hora_t: () => Promise<DateTimeOutput>;
  total_por_pagar: () => Promise<Float>;
}

export interface TaquillaConnection {
  pageInfo: PageInfo;
  edges: TaquillaEdge[];
}

export interface TaquillaConnectionPromise
  extends Promise<TaquillaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaquillaEdge>>() => T;
  aggregate: <T = AggregateTaquillaPromise>() => T;
}

export interface TaquillaConnectionSubscription
  extends Promise<AsyncIterator<TaquillaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaquillaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaquillaSubscription>() => T;
}

export interface TaquillaEdge {
  node: Taquilla;
  cursor: String;
}

export interface TaquillaEdgePromise
  extends Promise<TaquillaEdge>,
    Fragmentable {
  node: <T = TaquillaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaquillaEdgeSubscription
  extends Promise<AsyncIterator<TaquillaEdge>>,
    Fragmentable {
  node: <T = TaquillaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTaquilla {
  count: Int;
}

export interface AggregateTaquillaPromise
  extends Promise<AggregateTaquilla>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaquillaSubscription
  extends Promise<AsyncIterator<AggregateTaquilla>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  password?: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CarteleraSubscriptionPayload {
  mutation: MutationType;
  node: Cartelera;
  updatedFields: String[];
  previousValues: CarteleraPreviousValues;
}

export interface CarteleraSubscriptionPayloadPromise
  extends Promise<CarteleraSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarteleraPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarteleraPreviousValuesPromise>() => T;
}

export interface CarteleraSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarteleraSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarteleraSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarteleraPreviousValuesSubscription>() => T;
}

export interface CarteleraPreviousValues {
  id_pelicula: ID_Output;
  nombre_peli: String;
  sinopsis: String;
  clasificacion: String;
  duracion: Int;
}

export interface CarteleraPreviousValuesPromise
  extends Promise<CarteleraPreviousValues>,
    Fragmentable {
  id_pelicula: () => Promise<ID_Output>;
  nombre_peli: () => Promise<String>;
  sinopsis: () => Promise<String>;
  clasificacion: () => Promise<String>;
  duracion: () => Promise<Int>;
}

export interface CarteleraPreviousValuesSubscription
  extends Promise<AsyncIterator<CarteleraPreviousValues>>,
    Fragmentable {
  id_pelicula: () => Promise<AsyncIterator<ID_Output>>;
  nombre_peli: () => Promise<AsyncIterator<String>>;
  sinopsis: () => Promise<AsyncIterator<String>>;
  clasificacion: () => Promise<AsyncIterator<String>>;
  duracion: () => Promise<AsyncIterator<Int>>;
}

export interface DetalleCarteleraSubscriptionPayload {
  mutation: MutationType;
  node: DetalleCartelera;
  updatedFields: String[];
  previousValues: DetalleCarteleraPreviousValues;
}

export interface DetalleCarteleraSubscriptionPayloadPromise
  extends Promise<DetalleCarteleraSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DetalleCarteleraPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DetalleCarteleraPreviousValuesPromise>() => T;
}

export interface DetalleCarteleraSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DetalleCarteleraSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DetalleCarteleraSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DetalleCarteleraPreviousValuesSubscription>() => T;
}

export interface DetalleCarteleraPreviousValues {
  id_pelicula_DC: ID_Output;
  hora_DC: ID_Output;
  dia_DC: ID_Output;
}

export interface DetalleCarteleraPreviousValuesPromise
  extends Promise<DetalleCarteleraPreviousValues>,
    Fragmentable {
  id_pelicula_DC: () => Promise<ID_Output>;
  hora_DC: () => Promise<ID_Output>;
  dia_DC: () => Promise<ID_Output>;
}

export interface DetalleCarteleraPreviousValuesSubscription
  extends Promise<AsyncIterator<DetalleCarteleraPreviousValues>>,
    Fragmentable {
  id_pelicula_DC: () => Promise<AsyncIterator<ID_Output>>;
  hora_DC: () => Promise<AsyncIterator<ID_Output>>;
  dia_DC: () => Promise<AsyncIterator<ID_Output>>;
}

export interface DetalleSalaSubscriptionPayload {
  mutation: MutationType;
  node: DetalleSala;
  updatedFields: String[];
  previousValues: DetalleSalaPreviousValues;
}

export interface DetalleSalaSubscriptionPayloadPromise
  extends Promise<DetalleSalaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DetalleSalaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DetalleSalaPreviousValuesPromise>() => T;
}

export interface DetalleSalaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DetalleSalaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DetalleSalaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DetalleSalaPreviousValuesSubscription>() => T;
}

export interface DetalleSalaPreviousValues {
  no_sala_DS: ID_Output;
  asiento_DS: ID_Output;
  fila_DS: ID_Output;
}

export interface DetalleSalaPreviousValuesPromise
  extends Promise<DetalleSalaPreviousValues>,
    Fragmentable {
  no_sala_DS: () => Promise<ID_Output>;
  asiento_DS: () => Promise<ID_Output>;
  fila_DS: () => Promise<ID_Output>;
}

export interface DetalleSalaPreviousValuesSubscription
  extends Promise<AsyncIterator<DetalleSalaPreviousValues>>,
    Fragmentable {
  no_sala_DS: () => Promise<AsyncIterator<ID_Output>>;
  asiento_DS: () => Promise<AsyncIterator<ID_Output>>;
  fila_DS: () => Promise<AsyncIterator<ID_Output>>;
}

export interface DetalleTaquillaSubscriptionPayload {
  mutation: MutationType;
  node: DetalleTaquilla;
  updatedFields: String[];
  previousValues: DetalleTaquillaPreviousValues;
}

export interface DetalleTaquillaSubscriptionPayloadPromise
  extends Promise<DetalleTaquillaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DetalleTaquillaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DetalleTaquillaPreviousValuesPromise>() => T;
}

export interface DetalleTaquillaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DetalleTaquillaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DetalleTaquillaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DetalleTaquillaPreviousValuesSubscription>() => T;
}

export interface DetalleTaquillaPreviousValues {
  no_venta_DT: ID_Output;
  no_sala: ID_Output;
  asiento: ID_Output;
  fila: ID_Output;
  id_pelicula_DT: ID_Output;
  hora: ID_Output;
  dia: ID_Output;
}

export interface DetalleTaquillaPreviousValuesPromise
  extends Promise<DetalleTaquillaPreviousValues>,
    Fragmentable {
  no_venta_DT: () => Promise<ID_Output>;
  no_sala: () => Promise<ID_Output>;
  asiento: () => Promise<ID_Output>;
  fila: () => Promise<ID_Output>;
  id_pelicula_DT: () => Promise<ID_Output>;
  hora: () => Promise<ID_Output>;
  dia: () => Promise<ID_Output>;
}

export interface DetalleTaquillaPreviousValuesSubscription
  extends Promise<AsyncIterator<DetalleTaquillaPreviousValues>>,
    Fragmentable {
  no_venta_DT: () => Promise<AsyncIterator<ID_Output>>;
  no_sala: () => Promise<AsyncIterator<ID_Output>>;
  asiento: () => Promise<AsyncIterator<ID_Output>>;
  fila: () => Promise<AsyncIterator<ID_Output>>;
  id_pelicula_DT: () => Promise<AsyncIterator<ID_Output>>;
  hora: () => Promise<AsyncIterator<ID_Output>>;
  dia: () => Promise<AsyncIterator<ID_Output>>;
}

export interface SalasSubscriptionPayload {
  mutation: MutationType;
  node: Salas;
  updatedFields: String[];
  previousValues: SalasPreviousValues;
}

export interface SalasSubscriptionPayloadPromise
  extends Promise<SalasSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SalasPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SalasPreviousValuesPromise>() => T;
}

export interface SalasSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SalasSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SalasSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SalasPreviousValuesSubscription>() => T;
}

export interface SalasPreviousValues {
  no_sala: ID_Output;
  tipo_sala: String;
  totalAsientos: String;
  totalFunciones: String;
}

export interface SalasPreviousValuesPromise
  extends Promise<SalasPreviousValues>,
    Fragmentable {
  no_sala: () => Promise<ID_Output>;
  tipo_sala: () => Promise<String>;
  totalAsientos: () => Promise<String>;
  totalFunciones: () => Promise<String>;
}

export interface SalasPreviousValuesSubscription
  extends Promise<AsyncIterator<SalasPreviousValues>>,
    Fragmentable {
  no_sala: () => Promise<AsyncIterator<ID_Output>>;
  tipo_sala: () => Promise<AsyncIterator<String>>;
  totalAsientos: () => Promise<AsyncIterator<String>>;
  totalFunciones: () => Promise<AsyncIterator<String>>;
}

export interface TaquillaSubscriptionPayload {
  mutation: MutationType;
  node: Taquilla;
  updatedFields: String[];
  previousValues: TaquillaPreviousValues;
}

export interface TaquillaSubscriptionPayloadPromise
  extends Promise<TaquillaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaquillaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaquillaPreviousValuesPromise>() => T;
}

export interface TaquillaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaquillaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaquillaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaquillaPreviousValuesSubscription>() => T;
}

export interface TaquillaPreviousValues {
  no_venta: ID_Output;
  fecha_t: DateTimeOutput;
  hora_t: DateTimeOutput;
  total_por_pagar: Float;
}

export interface TaquillaPreviousValuesPromise
  extends Promise<TaquillaPreviousValues>,
    Fragmentable {
  no_venta: () => Promise<ID_Output>;
  fecha_t: () => Promise<DateTimeOutput>;
  hora_t: () => Promise<DateTimeOutput>;
  total_por_pagar: () => Promise<Float>;
}

export interface TaquillaPreviousValuesSubscription
  extends Promise<AsyncIterator<TaquillaPreviousValues>>,
    Fragmentable {
  no_venta: () => Promise<AsyncIterator<ID_Output>>;
  fecha_t: () => Promise<AsyncIterator<DateTimeOutput>>;
  hora_t: () => Promise<AsyncIterator<DateTimeOutput>>;
  total_por_pagar: () => Promise<AsyncIterator<Float>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  password?: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Cartelera",
    embedded: false
  },
  {
    name: "DetalleCartelera",
    embedded: false
  },
  {
    name: "DetalleSala",
    embedded: false
  },
  {
    name: "DetalleTaquilla",
    embedded: false
  },
  {
    name: "Salas",
    embedded: false
  },
  {
    name: "Taquilla",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["URL_BASE"]}/default/${process.env["ENVIROMENT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
